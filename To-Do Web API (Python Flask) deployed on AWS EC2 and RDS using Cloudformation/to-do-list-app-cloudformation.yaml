WSTemplateFormatVersion: 2010-09-09
Description: >-
              Create EC2 instance and deploy to do Application to the instance after installing apache webserver along 
              with the following components: 
              1. The application stack should be created with new AWS resources.
              2. The application should run on Amazon Linux 2 EC2 Instance.
              3. The Web Application should be accessible via web browser from anywhere.
              4. The Application files should be downloaded from Github repo and deployed on EC2 Instance using user data script within cloudformation template.
              5. For RDS Database Instance;

                  - Instance type can be configured as db.t2.micro.
                  - Database engine can be MySQL with version of 8.0.19.
              6. To-Do Web API URL should be given as output by Cloudformation Service, after the stack created.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: EC2democlarusway
    AllowedValues:
      - EC2democlarusway
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be the VPC Id of an existing Virtual Private Cloud. Outbound traffic
      for the default security group associated with this VPC should be enabled.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.  

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m3.large
    ConstraintDescription: must be a valid EC2 instance type.

  AllowedIP:
    Description: The IP address range that can have access for ports 22 and 80
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.

  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.

  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.

  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
    
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
    ConstraintDescription: must select a valid database instance type.  

Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 and access to port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupName: EC2SecurityGroup
      VpcId: !Ref VpcId


  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-02354e95b39ca8dec
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      Tags: 
        - Key: Name
          Value: !Sub Web Server of ${AWS::StackName} Stack
      UserData:
        Fn::Base64: |
          #! /bin/bash
          sudo yum update -y
          sudo yum install python3 -y
          sudo pip3 install flask
          sudo pip3 install flask_sqlalchemy
          wget https://raw.githubusercontent.com/ajayram91/PythonApplications/master/To-Do%20Web%20API%20(Python%20Flask)%20deployed%20on%20AWS%20EC2%20and%20RDS%20using%20Cloudformation/to-do-list-app.py
          sudo python3 to-do-list-app.py
Outputs:
  WebsiteURL:
    Description: To DO List Application URL
    Value: !Sub 
      - http://${PublicAddress}
      - PublicAddress: !GetAtt WebServerInstance.PublicDnsName





          
        

    

 






